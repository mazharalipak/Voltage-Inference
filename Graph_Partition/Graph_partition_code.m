%% Finding common node along the path from source to target ..............

clc;
clearvars;

%% Preliminaries .... data file ..................................

      data = load('IEEE_123.mat');                                          % IEEE Distribution Feeder ...............                                
       Bus = struct2table(data.Bus);                                       % Bus data ............
    Branch = struct2table(data.Branch);                                    % Branch data ......................
  From_bus = Branch.f;                                                     % From buses ............
    To_bus = Branch.t;                                                     % To buses .................
numb_nodes = size(Bus,1);                                                  % Total number of buses/nodes ........

%% Observable buses set ............................

Obs_bus_set = [6 13 22 33 42 58 68 77];
%[6 13 68 77];
%[6 13 22 34 45 57 68 77]; 

% Set of observable buses/nodes ..........

%% Boundary/end nodes of the Tree-Topology ................

      No_nodes = union(From_bus, To_bus);   %(1:numb_nodes)';              % Set of nodes in the graph ........
       idx_vec = ismember(No_nodes, From_bus);                             % Set of nodes present/not-present in From_bus ......
Boundary_nodes = [1;No_nodes( ~idx_vec )];                                     % Set of boundary nodes in the graph ............
     nodenames = string(No_nodes);                                         % Node name numering ...........

%% Plot for the Graph ..........................................

 G_graph = graph(From_bus,To_bus,[ones(numb_nodes-1, 1),],nodenames);      % Graph with edges weight and node names ..........
 h_graph = plot(G_graph,'LineWidth',3.5,'MarkerSize',6);                   % plot the graph .........
 highlight(h_graph, Boundary_nodes, 'NodeColor', 'k', 'MarkerSize', 6)     % Highlighting the boundary nodes .............
 highlight(h_graph, Obs_bus_set, 'NodeColor', 'r' , 'MarkerSize', 6)       % Highlighting the observable nodes .............
 labeledge(h_graph, 1:numedges(G_graph), 1:numedges(G_graph) )             % Labeling all the edges in the graph .............

 title('IEEE 13-node distribution feeder','Interpreter',' Latex',...       % Tile of the Topology .......
     'fontsize',14);

 %% Creating all unique pairs of observable buses set .............

  pairs_comb = nchoosek(Obs_bus_set',uint16(2));                           % Creating all the unique pairs ...................
 n_size_comb =  size(pairs_comb,1);                                        % Maximum no. of pairs....................

%% Storing nodes and edges along the path of a source to target node ..........

       A_rray = cell(n_size_comb, 1);                                      % Cell with maximum pair for nodes .... 
A_rray_branch = cell(n_size_comb, 1);                                      % Cell with maximum pair for edges .... 
branch_weight = ones( size(G_graph.Edges,1), 1 );                          % Array with branch weights ......

for i = 1:n_size_comb

           [p_node_path, edge_path] = allpaths(G_graph, pairs_comb(i,1), pairs_comb(i,2) );      % Finding the nodes and edges from source to target node.......
                        p_node_path = cell2mat(p_node_path);                                     % Creating a cell for the nodes along a path.....
                      p_branch_path = cell2mat(edge_path);                                       % Creating a cell for the edges along a path........
             p_node_path ([1, end]) = [];                                                        % removing the source and target nodes from the ith path .....
                          A_rray(i) = {p_node_path};
                   A_rray_branch(i) = {p_branch_path};
    branch_weight(p_branch_path',1) = branch_weight(p_branch_path',1) + 1;                       % Assigning weights for each edge ...........

end

%% Eliminating p_node_path which are adjacent to each other .......... 

         ii_indx_not = find(cellfun(@isempty,A_rray));
A_rray (ii_indx_not) = [];

 labeledge(h_graph,1:numedges(G_graph),branch_weight)                      % Labeling all the edges in the graph with new weights .............

%% Finding the common node where to partion the graph .................

 m_node = mode( cell2mat(A_rray') );                                       % common node among all the paths ...................

hold on
highlight(h_graph,m_node,'NodeColor','g','MarkerSize',6);                  % Highlighting the interfacing/common node .............

%% Finding all the edges connecting to interfacing/common node ...............

[eid,nid] = outedges(G_graph,m_node);
       px = allpaths(G_graph, 6, nid(1) );

hold on
highlight(h_graph,m_node,'NodeColor',[0 0.75 0])                           % Highlighting the interfacing (m_node) nodes
highlight(h_graph,nid,'NodeColor','#EDB120')                               % Highlighting the outer nodes connected to the interfacing (m_node) nodes
highlight(h_graph,m_node,nid,'EdgeColor','#EDB120')                        % Highlighting the edges coming out from the interfacing (m_node) nodes
highlight(h_graph,Obs_bus_set,'NodeColor','red','MarkerSize',6)            % Highlighting the observable nodes..............

%% Graph cut for partitioning ...........

Anodes_bound = cell(max(size(Boundary_nodes)),1);                          % Cell containing nodes along the path from the m_node to target end/boundary node.........
 Aedges_bound = cell(max(size(Boundary_nodes)),1);
Anodes_count = cell(max(size(Boundary_nodes)),1);                          % Cell counting observable nodes along the path from the m_node to target end/boundary node.........
   Anodes_xx = zeros(max(size(Boundary_nodes)),1);                         % Counting amount of observable nodes along the path from the m_node to target end/boundary node.........

for i = 1:max(size(Boundary_nodes))

[nodes_mnode, edges_mnode] = allpaths(G_graph, m_node, Boundary_nodes(i));
           Anodes_bound(i) = nodes_mnode;
            Aedges_bound(i) = edges_mnode;
           Anodes_count(i) = {intersect(Obs_bus_set, cell2mat(Anodes_bound(i)))};
              Anodes_xx(i) = max(size(cell2mat(Anodes_count(i))));
end

Anodes_xx(find(cellfun(@isempty,Anodes_count))) = 0;

%% Sub-graphs......................................

[G1_nodex, G1_nodex] = max(Anodes_xx);

%indx_aa_eedge = cell2mat(Aedges_bound(G1_nodex));

branch_weight(setdiff(1:end,eid)) = 0;
 
[ii_pp, jj_pp] = max(branch_weight);

m_edgexx = jj_pp;

%mode( cell2mat(Aedges_bound') );

isSix = cellfun(@(x)ismember(x,m_edgexx),Aedges_bound,'UniformOutput',false);
isSix_indx = (cellfun(@nonzeros, isSix, 'UniformOutput', false));

indx_IGdx1 = find(~cellfun(@isempty,isSix_indx));

idx_G1 = unique([  cell2mat(Anodes_bound(indx_IGdx1)') ]);

%cell2mat(Anodes_bound(G1_nodex));

figure (2)
hold on
box on
sub_Graph1 = subgraph(G_graph, idx_G1);
       PXX_1 = plot(sub_Graph1,'LineWidth',3.5,'MarkerSize',6);
highlight(PXX_1, string(intersect(Boundary_nodes, idx_G1) ), 'NodeColor', 'k', 'MarkerSize', 6)     % Highlighting the boundary nodes .............
highlight( PXX_1, string(intersect(Obs_bus_set, idx_G1) ) , 'NodeColor', 'r' , 'MarkerSize', 6)      % Highlighting the observable nodes .............
set(gca,'XTick',[], 'YTick', [])
title('Partioned Graph $G_{1}$','Interpreter',' Latex',...       % Tile of the Topology .......
     'fontsize',14);

 %%

idx_G1(idx_G1 == m_node) = [];
idx_G2 = No_nodes;
idx_G2(ismember(idx_G2,idx_G1)) = [];

figure (3)
hold on
box on
sub_Graph2 = subgraph(G_graph, idx_G2);
       PXX_2 = plot(sub_Graph2,'LineWidth',3.5,'MarkerSize',6);
highlight(PXX_2, string(intersect(Boundary_nodes, idx_G2) ), 'NodeColor', 'k', 'MarkerSize', 6)     % Highlighting the boundary nodes .............
highlight( PXX_2, string(intersect(Obs_bus_set, idx_G2) ) , 'NodeColor', 'r' , 'MarkerSize', 6)      % Highlighting the observable nodes .............
set(gca,'XTick',[], 'YTick', [])
title('Partioned Graph $G_{2}$','Interpreter',' Latex',...       % Tile of the Topology .......
     'fontsize',14);


%%

branch_weight(find(~branch_weight)) = 1;
weight_nodes = zeros(max(size(No_nodes)),1);

for i =1:max(size(No_nodes))
         aa_edges = outedges(G_graph,i);
    weight_nodes(i)  = sum(branch_weight(aa_edges));
end

[max_weig, max_node] = max(weight_nodes);
